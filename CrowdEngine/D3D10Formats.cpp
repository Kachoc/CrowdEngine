#include "D3D10Formats.h"

namespace Crowd
{

namespace D3D10
{

//
//	FORMAT
//

DXGI_FORMAT ConvertFormat(FORMAT fmt)
{
	switch(fmt)
	{
		case FORMAT_R32G32B32A32_FLOAT:		return DXGI_FORMAT_R32G32B32A32_FLOAT;
		case FORMAT_R32G32B32A32_UINT:		return DXGI_FORMAT_R32G32B32A32_UINT;
		case FORMAT_R32G32B32A32_SINT:		return DXGI_FORMAT_R32G32B32A32_SINT;
		case FORMAT_R32G32B32_FLOAT:			return DXGI_FORMAT_R32G32B32_FLOAT;
		case FORMAT_R32G32B32_UINT:			return DXGI_FORMAT_R32G32B32_UINT;
		case FORMAT_R32G32B32_SINT:			return DXGI_FORMAT_R32G32B32_SINT;
		case FORMAT_R16G16B16A16_FLOAT:		return DXGI_FORMAT_R16G16B16A16_FLOAT;
		case FORMAT_R16G16B16A16_UNORM:		return DXGI_FORMAT_R16G16B16A16_UNORM;
		case FORMAT_R16G16B16A16_SNORM:		return DXGI_FORMAT_R16G16B16A16_SNORM;
		case FORMAT_R16G16B16A16_UINT:		return DXGI_FORMAT_R16G16B16A16_UINT;
		case FORMAT_R16G16B16A16_SINT:		return DXGI_FORMAT_R16G16B16A16_SINT;
		case FORMAT_R32G32_FLOAT:			return DXGI_FORMAT_R32G32_FLOAT;
		case FORMAT_R32G32_UINT:				return DXGI_FORMAT_R32G32_UINT;
		case FORMAT_R32G32_SINT:				return DXGI_FORMAT_R32G32_SINT;

		case FORMAT_R16G16_FLOAT:			return DXGI_FORMAT_R16G16_FLOAT;
		case FORMAT_R16G16_UNORM:			return DXGI_FORMAT_R16G16_UNORM;
		case FORMAT_R16G16_SNORM:			return DXGI_FORMAT_R16G16_SNORM;

		case FORMAT_R8G8B8A8_UNORM:			return DXGI_FORMAT_R8G8B8A8_UNORM;
		case FORMAT_R8G8B8A8_SNORM:			return DXGI_FORMAT_R8G8B8A8_SNORM;
		case FORMAT_R8G8B8A8_UINT:			return DXGI_FORMAT_R8G8B8A8_UINT;
		case FORMAT_R8G8B8A8_SINT:			return DXGI_FORMAT_R8G8B8A8_SINT;
		case FORMAT_D32_FLOAT:				return DXGI_FORMAT_D32_FLOAT;
		case FORMAT_R32_FLOAT:				return DXGI_FORMAT_R32_FLOAT;
		case FORMAT_R32_UINT:				return DXGI_FORMAT_R32_UINT;
		case FORMAT_R32_SINT:				return DXGI_FORMAT_R32_SINT;
		case FORMAT_R16_UNORM:				return DXGI_FORMAT_R16_UNORM;
		case FORMAT_R16_SNORM:				return DXGI_FORMAT_R16_SNORM;
		case FORMAT_R16_UINT:				return DXGI_FORMAT_R16_UINT;
		case FORMAT_R16_SINT:				return DXGI_FORMAT_R16_SINT;
		case FORMAT_R8_UNORM:				return DXGI_FORMAT_R8_UNORM;
		case FORMAT_R8_SNORM:				return DXGI_FORMAT_R8_SNORM;
		case FORMAT_R8_UINT:				return DXGI_FORMAT_R8_UINT;
		case FORMAT_R8_SINT:				return DXGI_FORMAT_R8_SINT;
		case FORMAT_D24S8:					return DXGI_FORMAT_D24_UNORM_S8_UINT;
		case FORMAT_D32_FLOAT_S8X24:			return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;

		case FORMAT_BC8:					return DXGI_FORMAT_BC1_UNORM;
		case FORMAT_BC16_A4:				return DXGI_FORMAT_BC2_UNORM;
		case FORMAT_BC16_A8:				return DXGI_FORMAT_BC3_UNORM;
		default:							return DXGI_FORMAT_UNKNOWN;
	}
}

FORMAT ConvertFormat(DXGI_FORMAT fmt)
{
	switch(fmt)
	{
		case DXGI_FORMAT_R32G32B32A32_FLOAT:	return FORMAT_R32G32B32A32_FLOAT;
		case DXGI_FORMAT_R32G32B32_FLOAT:		return FORMAT_R32G32B32_FLOAT;
		case DXGI_FORMAT_R16G16B16A16_FLOAT:	return FORMAT_R16G16B16A16_FLOAT;
		case DXGI_FORMAT_R16G16B16A16_UNORM:	return FORMAT_R16G16B16A16_UNORM;
		case DXGI_FORMAT_R16G16B16A16_SNORM:	return FORMAT_R16G16B16A16_SNORM;
		case DXGI_FORMAT_R16G16B16A16_UINT:	return FORMAT_R16G16B16A16_UINT;
		case DXGI_FORMAT_R16G16B16A16_SINT:	return FORMAT_R16G16B16A16_SINT;
		case DXGI_FORMAT_R32G32_FLOAT:		return FORMAT_R32G32_FLOAT;
		case DXGI_FORMAT_R32G32_UINT:			return FORMAT_R32G32_UINT;
		case DXGI_FORMAT_R32G32_SINT:			return FORMAT_R32G32_SINT;

		case DXGI_FORMAT_R16G16_FLOAT:		return FORMAT_R16G16_FLOAT;
		case DXGI_FORMAT_R16G16_UNORM:		return FORMAT_R16G16_UNORM;
		case DXGI_FORMAT_R16G16_SNORM:		return FORMAT_R16G16_SNORM;

		case DXGI_FORMAT_R8G8B8A8_UNORM:		return FORMAT_R8G8B8A8_UNORM;
		case DXGI_FORMAT_R8G8B8A8_SNORM:		return FORMAT_R8G8B8A8_SNORM;
		case DXGI_FORMAT_R8G8B8A8_UINT:		return FORMAT_R8G8B8A8_UINT;
		case DXGI_FORMAT_R8G8B8A8_SINT:		return FORMAT_R8G8B8A8_SINT;
		case DXGI_FORMAT_D32_FLOAT:			return FORMAT_D32_FLOAT;
		case DXGI_FORMAT_R32_FLOAT:			return FORMAT_R32_FLOAT;
		case DXGI_FORMAT_R32_UINT:			return FORMAT_R32_UINT;
		case DXGI_FORMAT_R32_SINT:			return FORMAT_R32_SINT;
		case DXGI_FORMAT_R16_UNORM:			return FORMAT_R16_UNORM;
		case DXGI_FORMAT_R16_SNORM:			return FORMAT_R16_SNORM;
		case DXGI_FORMAT_R16_UINT:			return FORMAT_R16_UINT;
		case DXGI_FORMAT_R16_SINT:			return FORMAT_R16_SINT;
		case DXGI_FORMAT_R8_UNORM:			return FORMAT_R8_UNORM;
		case DXGI_FORMAT_R8_SNORM:			return FORMAT_R8_SNORM;
		case DXGI_FORMAT_R8_UINT:			return FORMAT_R8_UINT;
		case DXGI_FORMAT_R8_SINT:			return FORMAT_R8_SINT;
		case DXGI_FORMAT_D24_UNORM_S8_UINT:	return FORMAT_D24S8;
		case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:	return FORMAT_D32_FLOAT_S8X24;
		case DXGI_FORMAT_BC1_UNORM:			return FORMAT_BC8;
		case DXGI_FORMAT_BC2_UNORM:			return FORMAT_BC16_A4;
		case DXGI_FORMAT_BC3_UNORM:			return FORMAT_BC16_A8;
		default:							return FORMAT_UNKNOWN;
	}
}

} //namespace D3D10

} // namespace Crowd